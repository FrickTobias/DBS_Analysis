#! /usr/bin/env python

import sys

def main(): 
    #
    # Imports
    #
    import metadata
    import time
    from seqdata import BarcodeClusterer
    from misc import Progress
    import multiprocessing
    import sqlite3
    
    #
    # check input and get commandline args
    #
    try: analysisfolder = metadata.AnalysisFolder(sys.argv[1])
    except IndexError: sys.stderr.write('please supply a commandline on format:\analyseClusters <analysis-output-folder>\n');sys.exit()
    
    #
    # check analysis folder
    #
    if not analysisfolder.checkIntegrity() == 'PASS': print analysisfolder.checkIntegrity()+'\nERROR: Now exiting'

    #
    # create a logfile
    #
    logfile = open(analysisfolder.logpath+'/'+time.strftime("%y%m%d-%H:%M:%S",time.localtime())+'_analyseClusters.log.txt','w',1)
    logfile.write('cmd: '+' '.join(sys.argv)+'\n')
    analysisfolder.logfile = logfile

    #
    # restructuring the data
    #
    if False:#not analysisfolder.database.datadropped:
	logfile.write('Restructuring database ... \n')
	barcodeClusterer = BarcodeClusterer(analysisfolder)
	barcodeClusterer.fillReadsDb()
	logfile.write('Dropping data ... \n')
	analysisfolder.database.dropReadColumns()
	logfile.write('done. \n')

    progress = Progress(analysisfolder.results.barcodeClusterCount,logfile=analysisfolder.logfile, unit='clusters')

    runInParallel = True
    if runInParallel:
	poolOfProcesses = multiprocessing.Pool(int(analysisfolder.settings.parallelProcesses),maxtasksperchild=100000000)
	parallelResults = poolOfProcesses.imap_unordered(foreachCluster,cluster_generator(analysisfolder),chunksize=1)
	for cluster in parallelResults:
	    cluster.updatedb()
	    progress.update()
	    #if progress.current == 20: break
	
    else:
        for cluster in cluster_generator(analysisfolder):
	    cluster = foreachCluster(cluster)
	    cluster.updatedb()
	    progress.update()

    logfile.write('analyseClusters FINISHED\n')

def cluster_generator(analysisfolder):
    
    from seqdata import BarcodeCluster
    from seqdata import BarcodeClusterer
    
    barcodeClusterer = BarcodeClusterer(analysisfolder)
#    for cluster_id in barcodeClusterer.getBarcodeClusterIds(shuffle=True,byMixedClusterReadCount=True):
    for cluster_id in barcodeClusterer.getBarcodeClusterIds(shuffle=False,byMixedClusterReadCount=False):
	cluster = BarcodeCluster(int(cluster_id), analysisfolder)
	#if cluster.readPairCount < 10: continue
	yield cluster

def foreachCluster(cluster):
    cluster.analyze()
    cluster.removeAllFiles()
    return cluster

if __name__ == "__main__": main()