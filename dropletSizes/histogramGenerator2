#! /usr/bin/env python

import sys
import numpy as np
import matplotlib.pyplot as plt
import operator
import sys
import os
import time
import re
import cv2

#
# check commandline
#
try: tmp =  sys.argv[1]
except IndexError: sys.stderr.write('non valid cmd-line\n')
filename = tmp
infileCount=len(sys.argv[1:])
sys.stderr.write('working with '+str(infileCount)+' potential infiles...\n');

#######################################################################
#
# SETTINGS:
#
# dp: This parameter is the inverse ratio of the accumulator resolution to the image resolution (see Yuen et al. for more details). Essentially, the larger the dp gets, the smaller the accumulator array gets.
# minDist: Minimum distance between the center (x, y) coordinates of detected circles. If the minDist is too small, multiple circles in the same neighborhood as the original may be (falsely) detected. If the minDist is too large, then some circles may not be detected at all.
# param1: Gradient value used to handle edge detection in the Yuen et al. method.
# param2: Accumulator threshold value for the cv2.HOUGH_GRADIENT method. The smaller the threshold is, the more circles will be detected (including false circles). The larger the threshold is, the more circles will potentially be returned.
# minRadius: Minimum size of the radius (in pixels).
# maxRadius: Maximum size of the radius (in pixels).
dp        =   1   #// inverse ratio of resolution
minDist   =  10   #// minimum distance between centers     PLAY WITH THIS!
param1    = 100   #// upper threshold for the internal Canny edge detector
param2    =  25   #// threshold for center detection       
minRadius =   1   #// minimum radius           PLAY WITH THIS!
maxRadius =  30   #// maximum radius           PLAY WITH THIS!
#######################################################################

#
# set initial values
#
infileCount = 0
sizes = []
outputs = []

#
# go through the infiles and detect all circles
#
for filename in sys.argv[1:]:
	
	#
	# check filename
	#
	if not filename.split('/')[-1].count('.jpg') == 1 or len(filename.split('/')[-1].split('.jpg'))==1: sys.stderr.write(filename+' not valid.\n');continue
	else:
		sys.stderr.write('Detecting circles in '+filename+'....\n');
		infileCount+=1

	#
	# Load image, add some blur and convert it to grayscale
	#
	image = cv2.imread(filename)
	output = image.copy()
	blur = cv2.GaussianBlur(image, (5,5), 0)
	gray = cv2.cvtColor(blur, cv2.COLOR_BGR2GRAY)
	
	#
	# detect the circles
	#
	circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, dp=dp,  minDist=minDist, param1=param1, param2=param2, minRadius=minRadius, maxRadius=maxRadius)
	if circles is not None:
	
		# convert the (x, y) coordinates and radius of the circles to integers
		circles = np.round(circles[0, :]).astype("int")

		# loop over the (x, y) coordinates and radius of the circles
		for (x, y, r) in circles:
	
			# draw the circle in the output image, then draw a rectangle
			# corresponding to the center of the circle
			cv2.circle(output, (x, y), r, (0, 255, 0), 2)
			cv2.rectangle(output, (x - 1, y - 1), (x + 1, y + 1), (0, 128, 255), -1)
			sizes.append(r)
	
		#
		# write an output showing the circles detected in the input - DISABLED
		#
		#cv2.imwrite(filename.split('/')[-1].split('.jpg')[0]+'.pythonOut.jpg', np.hstack([output]))
		#sys.stderr.write('writing deteted to in '+filename.split('/')[-1].split('.jpg')[0]+'.pythonOut.jpg'+'....\n')
		
		sys.stderr.write('...found '+str(len(circles))+' circles in '+filename+'\n')
		outputs.append(output.copy())

#
# Make a concatenated image of outputs,
# start by finding the number of rows and columns needed
infileCount = len(outputs)
rows = 1
cols = 1
tiles = 1
while tiles < infileCount:
	cols+=1
	tiles = rows*cols
	if tiles >= infileCount: break
	else:
		rows+=1
		tiles = rows*cols
print 'rows',rows,'cols',cols,'tiles',tiles

#
# make the rows
#
tmpRows = []
tmpCounter = 0
for row in range(rows):
	tmpRow = outputs[tmpCounter:tmpCounter+cols]
	if len(tmpRow) < cols: 
		extra = tmpCounter + cols - len(outputs)
		height, width, channels = image.shape
		blank_image = np.zeros((height,width,3), np.uint8)
		blank_image[:,:] = (190,190,190)      # (B, G, R)
		tmpRow += [blank_image for i in range(extra)]
	tmpRows.append( np.hstack(tmpRow) )
	tmpCounter = tmpCounter+cols
rows = tmpRows

#
# write the image to disc
#
cv2.imwrite('histogram2_detected.jpg',np.vstack(rows))


#####################################
#                                   #
# Process the detected droplet data #
#                                   #
#####################################

#
# convert pixels to microns
#

# 10 x objective
#convertion_factor = 1000.88/912 #microm/pix previously 1.12352
#convertion_factor = 500.593/454

# 20x objective
convertion_factor = 500.355/912 #micrometer/pixel

for i in range(len(sizes)): sizes[i] = sizes[i]*convertion_factor

#
# Convert from detected 2D-radius to volume (in pL)
#
PI = 3.14159265359
for i in range(len(sizes)):
	# volume =  (4/3)*PI*(1e-6*radius)**3 m3      to L      to pL
	sizes[i] = ((4/3)*PI*(1e-6*sizes[i])**3) * (10*10*10) * 1e12

#
# Filter drolpet sizes
#
tmp = []
dropletmax = 1e9
dropletmin = 0
for i in sizes:
	if i >= dropletmin and i <= dropletmax: tmp.append(i)
sizes = tmp

#
# Prepare data for plotting
#
counter = {}
total = 0
for size in sizes:
	try:counter[size] += 1
	except KeyError: counter[size] = 1
	total+=1
y = [value for key, value in sorted(counter.iteritems(), key=operator.itemgetter(0))]
x = sorted(counter.keys())

#
# Make plot
#
plots = []
fig, axes = plt.subplots(1, sharex=True)
plots.append(axes.plot(x, y,label='Raw counts'))
plots.append(axes.hist(sizes,range(0,int(round(max(x),0))+1,1),label='Binned histogram',histtype='step'))
handles, labels = axes.get_legend_handles_labels()
hl = sorted(zip(handles, labels), key=operator.itemgetter(1))
handles2, labels2 = zip(*hl)
axes.legend(handles2, labels2,loc=0,fontsize='small')
axes.set_xlabel('Volume (pL)')
axes.set_ylabel('# Number of droplets')
y_max = axes.get_ylim()[1]
x_max = axes.get_xlim()[1]

#
# add text to graph
#
axes.text(int(round(x_max*0.6,0)),int(round(y_max*0.85,0)),'Average = '+str(round(np.average(sizes),2))+' pL')
axes.text(int(round(x_max*0.6,0)),int(round(y_max*0.85-1*int(round(y_max*0.05,0)),0)),'Median = '+str(round(np.median(sizes),2))+' pL')
axes.text(int(round(x_max*0.6,0)),int(round(y_max*0.85-2*int(round(y_max*0.05,0)),0)),'Standard deviation = '+str(round(np.std(sizes),2)))
axes.text(int(round(x_max*0.6,0)),int(round(y_max*0.85-3*int(round(y_max*0.05,0)),0)),'droplets in 50uL = '+str(round( 50/np.average(sizes) ,2))+'M')
axes.text(int(round(x_max*0.6,0)),int(round(y_max*0.85-4*int(round(y_max*0.05,0)),0)),'Max = '+str(round(max(sizes),2))+' pL')
axes.text(int(round(x_max*0.6,0)),int(round(y_max*0.85-5*int(round(y_max*0.05,0)),0)),'Min = '+str(round(min(sizes),2))+' pL')
axes.text(int(round(x_max*0.6,0)),int(round(y_max*0.85-6*int(round(y_max*0.05,0)),0)),''+str(int(round(len(sizes),2)))+' droplets identified')

#
# save to pdf
#
plt.savefig('histogram2_sizes.pdf',dpi=300,bbox_inches='tight')
plt.savefig('histogram2_sizes.png',dpi=300,bbox_inches='tight')

#
# print some stats
#
print '### py-script out:'
print 'Average = '+str(round(np.average(sizes),2))+' pL'
print 'Median = '+str(round(np.median(sizes),2))+' pL'
print 'Standard deviation = '+str(round(np.std(sizes),2))+' pL'
