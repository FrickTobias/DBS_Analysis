#! /usr/bin/env python

def main():
    logfileMonitor = LogfileMonitor()
    logfileMonitor.run()

class LogfileMonitor():
    """ takes a directory from sys.argv and looks for files in that dir-tree and then runs tail follow on the files and shows output in parallel
    """
    
    def __init__(self, ):
        """ find the directory from argv and set initial values of variables
        """
    
        import sys
        import os

        inputData = sys.argv[1:]
        self.directories = {}
        self.fileNames = {}
        self.tailcontrolers = []
        self.tails = []
        self.outputlines = {}

        for thing in inputData:
            if os.path.isdir(thing): self.directories[thing]=True
            elif os.path.isfile(thing):
                self.directories[os.path.dirname(thing)]=True
            else:
                sys.stderr.write(thing+'is not dir or file skipping\n')

    def checkDirectories(self, ):
        """ function that loooks for new files in the monitored directories
        """
        
        import os
        import time
        newFiles = []
        
        for directory in self.directories:
            for tmp in os.walk(directory):
                for filename in tmp[2]:
                    fullPath = directory+'/'+filename
                    if fullPath not in self.fileNames: newFiles.append(fullPath)
                    self.fileNames[ fullPath ] = os.path.getmtime(fullPath)
        
        return newFiles
    
    def startTail(self, filename, outputRows):
        """ start the tail subprocess for a file
        """

        import subprocess
        import sys

        command = ['tail',
                    '-fn',
                    '0',
                    filename
                ]

        outputRows.put(('init','\n##############\n## New File ##'+' Starting command: '+' '.join(command)+'\n##############\n'+ open(filename).read()+'\n'))
        #sys.stderr.write('## New File ## Starting command: '+' '.join(command)+'\n')
        #sys.stderr.write(open(filename).read()+'\n')
        #tail = subprocess.Popen(command,stdout=sys.stdout,stderr=sys.stderr)
        tail = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        tail.fileName = filename
        self.tails.append(tail)
        
        for line in iter(tail.stdout.readline,''): outputRows.put((filename, line))

        #errdata = tail.communicate()
        #if (tail.returncode != 0 and tail.returncode != None):
        #    if tail.returncode != 0:
        #	print '#\n# cmd: '+' '.join( tail )+'\n#'
        #	print 'tail view Error code', tail.returncode, errdata
        #	#return 'FAIL'
        #	sys.exit()

    def run(self):
        """ runing the monitor of the directory to find new files and start the subprocesses
        """

        #
        # imports
        #
        import sys
        import time
        import multiprocessing
        import operator
        
        #
        # managers to keep track of data
        #
        output_manager = multiprocessing.Manager()
        outputRows = output_manager.Queue()
        lastRowFrom = None
        
        #
        # running loop
        #
        while True:
            try:
                
                # get new files
                newFiles = self.checkDirectories()
                
                # sort new files by mod time
                tmp = []
                for filename, modTime in sorted(self.fileNames.iteritems(), key=operator.itemgetter(1)):
                    if filename in newFiles: tmp.append(filename)
                newFiles = tmp
                
                # start tial controllers for new files
                for filename in newFiles:
                    tailcontroler = multiprocessing.Process(target=self.startTail, args=(filename,outputRows,))
                    tailcontroler.start()
                    time.sleep(0.1)
                    self.tailcontrolers.append(tailcontroler)
                
                # print rows in output qeueue
                while not outputRows.empty():
                    tmp, row = outputRows.get()
                    if lastRowFrom != tmp and tmp != 'init':
                        row = '\n###'+tmp+':\n'+ row
                    lastRowFrom = tmp
                    sys.stderr.write( row )
                    
            except KeyboardInterrupt: # on ctrl+c exit all
                for tail in self.tails:
                    print 'closing tail '+tail.fileName
                    tail.terminate()
                    tail.close()
                    print 'closed'
                for tailcontroler in self.tailcontrolers:
                    print 'Closing tailcontroler '+str(tailcontroler)
                    tailcontroler.terminate()
                    tailcontroler.join()
                    #tailcontroler.close()
                    print 'closed'
                break
            time.sleep(1)

        sys.stderr.write('Exiting ... \n')

if __name__ == '__main__': main()