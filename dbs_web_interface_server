#! /usr/bin/env python

#
# Imports
#
from flask import Flask
from flask import render_template
from flask import json
import metadata
import sys
import time
import os

#
# initiate the flask application
#
app = Flask(
    __name__,
    static_folder   = '/'.join(os.path.realpath(__file__).split('/')[:-1])+'/web_interface_static',
    static_url_path = '/static'
    )

#
# check input and get commandline args
#
try: analysisfolder = metadata.AnalysisFolder(sys.argv[1])
except IndexError: sys.stderr.write('please supply a commandline on format:\n'+os.path.basename(__file__)+' <analysis-output-folder>\n');sys.exit()
app.analysisfolder = analysisfolder
app.analysisfolder.settings.mapqCutOff = int(app.analysisfolder.settings.mapqCutOff)

#
# check analysis folder
#
if not analysisfolder.checkIntegrity() == 'PASS': print analysisfolder.checkIntegrity()+'\nERROR: Now exiting'

#
# create a logfile
#
logfile = open(analysisfolder.logpath+'/wfaViewerServer','a',1)
logfile.write('cmd: '+' '.join(sys.argv)+'\n')
analysisfolder.logfile = logfile

def createStaticFiles(app):
    """ function for creating the static folder if not present and some csv file -- DEPRECATED """
    
    #
    # Imports
    #
    import sys
    import os
    import seqdata    
    import operator
    
    pathToStatic = '/'.join(os.path.realpath(sys.argv[0]).split('/')[:-1])+'/static'
    if not os.path.isdir(pathToStatic): os.mkdir(pathToStatic)
    
    #insert sizes

    #
    # open connection to database
    #
    app.analysisfolder.database.getConnection()

    before = app.analysisfolder.settings.mapqCutOff
    for mapq in xrange(50):
        app.analysisfolder.settings.mapqCutOff=mapq
        readPairs = app.analysisfolder.database.c.execute('SELECT insertSize FROM reads WHERE mapQR1>=? AND mapQR2>=?',(app.analysisfolder.settings.mapqCutOff,app.analysisfolder.settings.mapqCutOff,))
        isizeDict = {}
        insertSizeCSV=open(pathToStatic+'/insersizes.'+str(app.analysisfolder.settings.mapqCutOff)+'.csv','w')
        insertSizeCSV.write('iSize,count\n')
        while True:
            
            rows = readPairs.fetchmany()#size=readPairs.arraysize)
            
            if not rows: break
            
            for row in rows:
                insertSize = row[0]
                try: isizeDict[insertSize]+=1
                except KeyError:isizeDict[insertSize]=1
        
        for insertSize, count in sorted(isizeDict.iteritems(), key=operator.itemgetter(0)): insertSizeCSV.write( str(insertSize)+','+str(count)+'\n')
    app.analysisfolder.settings.mapqCutOff=before
    
    app.analysisfolder.database.commitAndClose()    

def indexForeachCluster(clusterId):
    from seqdata import BarcodeClusterer, BarcodeCluster
    cluster = BarcodeCluster(clusterId,app.analysisfolder)
    cluster.loadClusterInfo()
    #cluster.loadReadPairs()
    cluster.minMAPQ = app.analysisfolder.settings.mapqCutOff
    return cluster

@app.route("/")
def start():
    """ initial page does nothing but redirecting the user to the index.html route """
    
    page =  """<!DOCTYPE HTML>
        <html lang="en-US">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="refresh" content="1;url=index.html">
            <script type="text/javascript">
              window.location.href = "index.html"
            </script>
            <title>Page Redirection</title>
        </head>
        <body>
            If you are not redirected automatically, follow <a href='index.html'>this link</a>
        </body>
      </html>"""
    
    return page

@app.route("/index.html")
@app.route('/index.html&low<low>')
@app.route('/index.html&high<high>')
@app.route('/index.html&low<low>&high<high>')
@app.route('/index.html&high<high>&low<low>')
def index(high=1000,low=0):
    """ function that builds the index page of the webinterface """

    #
    # Imports
    #
    from seqdata import BarcodeClusterer, BarcodeCluster
    from misc import thousandString, percentage
    import os
    import operator

    # convert high and low values for the cluster to show to integers
    high = max(int(high),int(low)+10)
    
    app.analysisfolder.logfile.write('Generating index.html ...\n')
    
    #
    # Initiate HTML file strucutre
    #
    outStr = ''
    outStr += '<html>'
    outStr += """<head>
        <script src="http://d3js.org/d3.v3.js"></script>
        <link rel="stylesheet" href="static/css/style.css">
        </head>"""
    outStr += '<body><div id="page">'
    
    #
    # The header bar seqction
    #
    outStr += '<div id="header">'
    outStr += '<h2>'+'&nbsp&nbsp&nbsp&nbsp'+'Summary of analysis at '+str(os.path.abspath(app.analysisfolder.path))+':</h2>'
    outStr += '</div>'
    outStr += '<div id="status">'
    outStr += '<svg height="32" width="150"><circle cx="16" cy="16" r="15" stroke="black" stroke-width="1" fill="gray" /><text x="40" y="20">wfaChecker</text></svg>'
    outStr += '<svg height="32" width="180"><circle cx="16" cy="16" r="15" stroke="black" stroke-width="1" fill="gray" /><text x="40" y="20">barcodeClustrer</text></svg>'
    outStr += '<svg height="32" width="180"><circle cx="16" cy="16" r="15" stroke="black" stroke-width="1" fill="gray" /><text x="40" y="20">clustersMapper</text></svg>'
    outStr += '<svg height="32" width="150"><circle cx="16" cy="16" r="15" stroke="black" stroke-width="1" fill="gray" /><text x="40" y="20">analyseClusters</text></svg>'
    outStr += '</div>'
    
    #
    # The stats sidebar on the left
    #
    outStr += '<div id="statistics"><br><br><br><br><br>'
    outStr += '<h2>Stats:</h2>'
    outStr += 'Total read pairs: '+thousandString(app.analysisfolder.results.totalReadCount)+'<br>\n'
    outStr += 'Minimum R1 length: '+str(app.analysisfolder.results.minR1readLength)+'<br>\n'
    outStr += 'Minimum R2 length: '+str(app.analysisfolder.results.minR2readLength)+'<br>\n'
    outStr += 'Reads has illumina adapter content: '+thousandString(app.analysisfolder.results.readPairsAreIlluminaAdapters)+' ('+str(percentage(app.analysisfolder.results.readPairsAreIlluminaAdapters,app.analysisfolder.results.totalReadCount))+'% of total)<br>\n'
    outStr += '<br>\n'

    outStr += 'Construct type dictionary: '+'<br>\n'
    outStr += '<center><div id="handlesunburst"></div><br><strong><span id="handleinfo">Total read pairs '+thousandString(app.analysisfolder.results.totalReadCount)+'</span></strong></center>'
    outStr += '<br>\n'
    outStr += '<script src="/static/js/handlesSunburst.js"></script>'
    
    outStr += 'Barcodes match DBS pattern:<br>\n'
    if app.analysisfolder.results.readsWithDbsPatternMatch:
        tmp = eval(app.analysisfolder.results.readsWithDbsPatternMatch)
        outStr += '&nbsp&nbsp&nbsp&nbsp'+'barcode does not exist => '+str(percentage(tmp[None],app.analysisfolder.results.totalReadCount))+'%, ('+thousandString(tmp[None])+')<br>\n'
        outStr += '&nbsp&nbsp&nbsp&nbsp'+'barcode does not match => '+str(percentage(tmp[False],app.analysisfolder.results.totalReadCount))+'%, ('+thousandString(tmp[False])+')<br>\n'
        outStr += '&nbsp&nbsp&nbsp&nbsp'+'barcode match DBS pattern=> '+str(percentage(tmp[True],app.analysisfolder.results.totalReadCount))+'%, ('+str(percentage(tmp[True],int(app.analysisfolder.results.totalReadCount)-int(tmp[None])))+'% of has barcode,'+thousandString(tmp[True])+')<br>\n'
    outStr += '<br>\n'
    outStr += 'Read pairs has a barcode: '+thousandString(app.analysisfolder.results.readPairsHasBarcode)+'<br>\n'
    outStr += 'Unique barcodes: '+thousandString(app.analysisfolder.results.uniqueBarcodeSequences)+'<br>\n'
    outStr += 'Barcode clusters found: '+thousandString(app.analysisfolder.results.barcodeClusterCount)+'<br>\n'
    outStr += 'Barcode clusters are singletons: '+thousandString(app.analysisfolder.results.singeltonBarcodeClusters)+'<br>\n'+'<br>\n'
    outStr += 'Bowtie2 alignment Rate: '+str(app.analysisfolder.results.bt2AlignmentRate)+'%<br>\n'
    outStr += 'Percentage of SE alignments with mapq >= 20: '+str(app.analysisfolder.results.alignmentRateQ20)+'%<br>\n'+'<br>\n'
    outStr += '<br>\n'
    outStr += '</div>'
    
    #
    # The cluster detail panel on the right
    #
    outStr += '<div id="details"><br><br><br><br><br>'
    outStr += """<br><br>
    <script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
    <script src="/static/js/readsPerClusterHistogram.js"></script>
    <div id="slider">
        <span style="font: 12px sans-serif;color:black">Minimum Read Count Per Barcode Cluster</span><br>
        <label for="nReadsMin" style="display: inline-block; width: 55px; text-align: right">
        <span id="nReadsMin-value" style="font: 12px sans-serif;color:black">...</span>
        </label>
        <input type="range" step="1" min="0" max="5000" id="nRPCcutoff" value="0"><br>
        <div id="image"></div>
    </div>
    
    """

    outStr += '<h2>List of clusters:</h2>'
    if app.analysisfolder.results.barcodeClusterCount:
        barcodeClusterer = BarcodeClusterer(app.analysisfolder)
        import multiprocessing
        #poolOfProcesses = multiprocessing.Pool(int(app.analysisfolder.settings.parallelProcesses),maxtasksperchild=10000)
        #parallelResults = poolOfProcesses.imap_unordered(indexForeachCluster,barcodeClusterer.getBarcodeClusterIds(shuffle=False,byMixedClusterReadCount=False),chunksize=1)
        #parallelResults = poolOfProcesses.imap(indexForeachCluster,barcodeClusterer.getBarcodeClusterIds(shuffle=False,byMixedClusterReadCount=False),chunksize=1)
        tableHeader = '<tr>' 
        tableHeader += '<th>clusterID</th>'
        tableHeader += '<th>individualID</th>'
        tableHeader += '<th>barcode</th>'
        tableHeader += '<th>reads (PE)</th>'
        tableHeader += '<th>map% (SE)</th>'
        tableHeader += '<th>map%q20 (SE)</th>'
        tableHeader += '<th>goodPair%</th>'
        tableHeader += '<th>dup%</th>'
        tableHeader += '<th>targetInfo</th>'
        tableHeader += '</tr>' 
        counter = 0
        sameChrom = 0
        pcrDup = 0
        totalReadPairCount=0
        totalmappedSEReads=0
        totalreadPairsInBamFile=0
        totalSEreadsPassMappingQualityFilter=0
        totalgoodReadPairs=0
        totalduplicateReadPairs=0
        tableRows = ''
        #for clusterId in barcodeClusterer.getBarcodeClusterIds(shuffle=False,byMixedClusterReadCount=False):
        for cluster in app.analysisfolder.database.getAllClustersLoaded(app.analysisfolder):
            clusterId = cluster.id
            cluster.minMAPQ = app.analysisfolder.settings.mapqCutOff
            if int(clusterId) < int(low): continue
            #cluster = indexForeachCluster(clusterId)
            
        #for cluster in parallelResults:
            if int(clusterId) > int(high): break
            counter += 1            
            
            inbamPerc = percentage(cluster.readPairsInBamFile,cluster.readPairCount)
            if cluster.readPairsInBamFile:
                mappedSE = percentage(cluster.mappedSEReads, cluster.readPairsInBamFile*2)
                mappedSEqPass=percentage(cluster.SEreadsPassMappingQualityFilter,cluster.readPairsInBamFile*2)
            else:
                mappedSE = percentage(cluster.mappedSEReads, 0)
                mappedSEqPass=percentage(cluster.SEreadsPassMappingQualityFilter,0)

            goodReads = percentage(cluster.goodReadPairs,cluster.readPairsInBamFile)
            dupPerc = percentage(cluster.duplicateReadPairs,cluster.goodReadPairs)
            targetInfo = cluster.targetInfo

            if cluster.mappedSEReads:      totalmappedSEReads+=cluster.mappedSEReads
            if cluster.readPairsInBamFile: totalreadPairsInBamFile+=cluster.readPairsInBamFile
            if cluster.SEreadsPassMappingQualityFilter: totalSEreadsPassMappingQualityFilter+=cluster.SEreadsPassMappingQualityFilter
            if cluster.goodReadPairs:      totalgoodReadPairs+=cluster.goodReadPairs
            if cluster.duplicateReadPairs: totalduplicateReadPairs+=cluster.duplicateReadPairs
            
            tableRows += '<tr>'
            tableRows += '<td><a href="/cluster'+str(cluster.id)+'">'+str(cluster.id)+'</a></td>'
            tableRows += '<td><a href="/cluster'+str(cluster.id)+'">'
            if cluster.individual_ID_dictionary:
                for seq, count in cluster.individual_ID_dictionary.iteritems():
                    if len(str(seq))  > 6:
                        tableRows += str(seq)[:3]+'...'+str(seq)[-3:]+'='+str(count)+'<br>'
                    else:
                        tableRows += str(seq)+'='+str(count)+'<br>'
            tableRows += '</a></td>'
            tableRows += '<td><a href="cluster'+str(cluster.id)+'"><font face="Courier">'+str(cluster.barcodeSequence)+'</font></a></td>\n'
            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'+str(cluster.readPairCount)+'</a></td>\n'
            totalReadPairCount += cluster.readPairCount

            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'
            if mappedSE == 'NA': tableRows += '<font color="gray">'
            elif mappedSE > 50:tableRows += '<font color="green">'
            else:            tableRows += '<font color="red">'
            tableRows += str(mappedSE)+'%</font></a></td>\n'

            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'
            if mappedSEqPass == 'NA': tableRows += '<font color="gray">'
            elif mappedSEqPass > 50:tableRows += '<font color="green">'
            else:            tableRows += '<font color="red">'
            tableRows += str(mappedSEqPass)+'%</font></a></td>\n'

            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'
            if goodReads == 'NA': tableRows += '<font color="gray">'
            elif goodReads > 50:tableRows += '<font color="green">'
            else:            tableRows += '<font color="red">'
            tableRows += str(goodReads)+'%</font></a></td>\n'

            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'
            if dupPerc == 'NA': tableRows += '<font color="gray">'
            elif dupPerc < 50:tableRows += '<font color="green">'
            else:            tableRows += '<font color="red">'
            tableRows += str(dupPerc)+'%</font></a></td>\n'

            
            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'
            if targetInfo:
                for entry in targetInfo:
    
                    if      entry['averageReadDepth']== 0: tableRows += '<font color="red">'
                    elif    entry['averageReadDepth'] < 15 and entry['averageReadDepth'] > 0 :tableRows += '<font color="orange">'
                    elif    entry['averageReadDepth'] < 30 and entry['averageReadDepth'] > 15 :tableRows += '<font color="blue">'
                    else:  tableRows += '<font color="green">'
                    
                    tableRows += str(entry['entry_name'])+'='+str(entry['averageReadDepth'])+'<br>'
            tableRows +='</font></a></td>\n'
            
            tableRows += '</tr>'

        #poolOfProcesses.close();print 'Closing'
        #poolOfProcesses.terminate();print 'terminating'
        #poolOfProcesses.join();print 'joining'
        outStr += '<table>'
        outStr += '<tr>'


        #
        # summary row for the clusters table
        #
        mappedSE = percentage(totalmappedSEReads, totalreadPairsInBamFile*2)
        mappedSEqPass=percentage(totalSEreadsPassMappingQualityFilter,totalreadPairsInBamFile*2)
        goodReads = percentage(totalgoodReadPairs,totalreadPairsInBamFile)
        dupPerc = percentage(totalduplicateReadPairs,totalgoodReadPairs)

        outStr += '<td colspan=3><font face="Courier">Summary for the first '+str(counter)

        outStr += ' clusters</font></td>\n'

        outStr += '<td>'+str(thousandString(totalReadPairCount))+'</td>\n'

        outStr += '<td>'
        if mappedSE == 'NA': outStr += '<font color="gray">'
        elif mappedSE > 50:outStr += '<font color="green">'
        else:            outStr += '<font color="red">'
        outStr += str(mappedSE)+'%</font></td>\n'

        outStr += '<td>'
        if mappedSEqPass == 'NA': outStr += '<font color="gray">'
        elif mappedSEqPass > 50:outStr += '<font color="green">'
        else:            outStr += '<font color="red">'
        outStr += str(mappedSEqPass)+'%</font></td>\n'

        outStr += '<td>'
        if goodReads == 'NA': outStr += '<font color="gray">'
        elif goodReads > 50:outStr += '<font color="green">'
        else:            outStr += '<font color="red">'
        outStr += str(goodReads)+'%</font></td>\n'

        outStr += '<td>'
        if dupPerc == 'NA': outStr += '<font color="gray">'
        elif dupPerc < 50:outStr += '<font color="green">'
        else:            outStr += '<font color="red">'
        outStr += str(dupPerc)+'%</font></td>\n'

        outStr += '<td>'
        outStr += '<font color="gray">'+str('targetInfo')+'</font></td>\n'
        
        
        outStr += tableHeader
        outStr += tableRows    
        outStr += '</table><br>'
    outStr += '</div>'
    outStr += '</div>'
    app.analysisfolder.logfile.write('index.html generated.\n')
    return outStr

@app.route('/cluster<cluster_id>')
@app.route('/cluster<cluster_id>&makebam=<makebam>')
def cluster(cluster_id, makebam=False):
    """ per cluster info page function """

    import time
    starttime = time.time()
    print 'Creating per cluster page for cluster '+str(cluster_id)
    app.analysisfolder.logfile.write('Creating per cluster page for cluster '+str(cluster_id)+' ... '+'\n')
    from seqdata import BarcodeCluster
    from misc import thousandString
    from misc import percentage
    import pysam

    outStr = ''
    outStr += '<html>'
    outStr += """<head><style>
        body {
            background-color:white
            font-family : Arial,"Myriad Web",Verdana,Helvetica,sans-serif;
        }
        h1   {color:black}
        p    {color:green}
        
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
            
            font-size : 12;
        }
        th {
            text-align: center;
            background-color:darkgray;
            color:white;
            border: 1px solid black;
        }
        table {border-spacing: 1px;}
        th,td {padding: 5px;}
        td {text-align: center;}
    </style></head>"""
    outStr += '<body><a href=index.html>Back</a> | <a href=cluster'+str(cluster_id)+'&makebam=True >Make Bamfile</a><br><br>'

    cluster = BarcodeCluster(int(cluster_id),app.analysisfolder)
    app.analysisfolder.logfile.write('Loading reads for cluster '+str(cluster_id)+' ... '+'\n')
    cluster.loadClusterInfo()
    if not cluster.tableStr:
        cluster.analyze()
        cluster.removeAllFiles()
        cluster.updatedb()

    if makebam:
        cluster.analyze(createBamIndex=True)
        cluster.updatedb()

    outStr += cluster.generateHtmlSummary()
    outStr += '<br><br>'
    outStr += cluster.tableStr
    outStr += '</body></html>\n'
    app.analysisfolder.logfile.write('Page for cluster '+str(cluster_id)+' generated in '+str(round(time.time()-starttime,2))+'seconds '+'\n')
    return outStr

@app.route("/readspercluster.csv")
def readspercluster():
    """ creates a csv from the info in database and dumps to string """
    
    outstr = '"id","reads"'+'\n'    
    app.analysisfolder.database.getConnection()
    try: tmpData = list(app.analysisfolder.database.c.execute('SELECT clusterId,clusterTotalReadCount FROM barcodeClusters').fetchall())
    except:tmpData =[]
    app.analysisfolder.database.commitAndClose()
    for i in tmpData:
        if int(i[1]) > 0 :outstr += '"'+str(i[0])+'",'+str(i[1])+'\n'
    return outstr

@app.route("/handles.json")
def makehandlejson():
    """ gets the handle content information and dums it to json """
    
    import operator
    from misc import percentage
    from misc import thousandString
    constructOK = 0
    missing_h3 = 0
    missing_h2 = 0
    missing_h3_h2 = 0
    missing_h1_h2_h3 = 0
    missing_h1_h2 = 0
    missing_h1 = 0
    missing_h1_h3 = 0
    if app.analysisfolder.results.constructTypes:
        tmpDict = eval(app.analysisfolder.results.constructTypes)
        for what, count in sorted(eval(app.analysisfolder.results.constructTypes).iteritems(), key=operator.itemgetter(1))[::-1]:
            what = what.split(' ')
#            print ' '+str(what)+' => '+str(percentage(count,app.analysisfolder.results.totalReadCount))+'%, ('+thousandString(count)+')'
            if what == ['constructOK']: constructOK = count
            elif 'h1' in what:
                if 'h2' in what:
                    if 'h3' in what: missing_h1_h2_h3 = count
                    else: missing_h1_h2 = count
                elif 'h3' in what: missing_h1_h3 = count
                else: missing_h1 = count
            elif 'h2' in what:
                if 'h3' in what: missing_h3_h2 = count
                else: missing_h2 = count
            elif 'h3' in what: missing_h3 = count
            else: print 'unexpected', what
        total = constructOK +missing_h3 +missing_h2 +missing_h3_h2 +missing_h1_h2_h3 +missing_h1_h2 +missing_h1 +missing_h1_h3
    else: total = 0

    json  ='     {"name": "Total read pairs", "children": ['
    json +='        {"name": "'+str(percentage(constructOK+missing_h3+missing_h2+missing_h3_h2,total))+'%'+' Has h1", "children": ['
    json +='            {"name": "'+str(percentage(constructOK+missing_h3,total))+'%'+' Has h1 and h2", "children": ['
    json +='                {"name": "'+str(percentage(constructOK,total))+'%'+' Has h1, h2 and h3", "size": '+str(constructOK)+'},'
    json +='                {"name": "'+str(percentage(missing_h3,total))+'%'+' Has h1, h2 and miss h3", "size": '+str(missing_h3)+'}   '
    json +='            ] },'
    json +='            {"name": "'+str(percentage(missing_h2+missing_h3_h2,total))+'%'+' Has h1 and miss h2", "children": ['
    json +='                {"name": "'+str(percentage(missing_h2,total))+'%'+' Has h1, miss h2 and has h3", "size": '+str(missing_h2)+'},  '
    json +='                {"name": "'+str(percentage(missing_h3_h2,total))+'%'+' Has h1, miss h2 and miss h3", "size": '+str(missing_h3_h2)+'}'    
    json +='            ] }'
    json +='        ] },'
    json +='        {"name": "'+str(percentage(missing_h1_h2_h3+missing_h1_h2+missing_h1+missing_h1_h3,total))+'%'+' Miss h1", "children": ['
    json +='            {"name": "'+str(percentage(missing_h1_h2_h3+missing_h1_h2,total))+'%'+' Miss h1 and h2", "children": ['
    json +='                {"name": "'+str(percentage(missing_h1_h2_h3,total))+'%'+' Miss h1, h2 and h3", "size": '+str(missing_h1_h2_h3)+'},         '
    json +='                {"name": "'+str(percentage(missing_h1_h2,total))+'%'+' Miss h1, miss h2 and has h3", "size": '+str(missing_h1_h2)+'}   '
    json +='            ] },'
    json +='            {"name": "'+str(percentage(missing_h1+missing_h1_h3,total))+'%'+' Miss h1 and has h2", "children": ['
    json +='                {"name": "'+str(percentage(missing_h1,total))+'%'+' Miss h1, has h2 and h3", "size": '+str(missing_h1)+'},      '
    json +='                {"name": "'+str(percentage(missing_h1_h3,total))+'%'+' Miss h1, has h2 and miss h3", "size": '+str(missing_h1_h3)+'}     '
    json +='            ] }'
    json +='        ] }'
    json +='     ] }'

    return json

if __name__ == "__main__":
#    createStaticFiles(app)
    import random
    app.run(host='0.0.0.0',port=random.randint(1000,9999),debug=True)