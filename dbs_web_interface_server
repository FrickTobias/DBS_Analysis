#! /usr/bin/env python

#
# Imports
#

from flask import Flask
from flask import render_template
from flask import json
import metadata
import sys
import time
import os

app = Flask(__name__)

#
# check input and get commandline args
#
try: analysisfolder = metadata.AnalysisFolder(sys.argv[1])
except IndexError: sys.stderr.write('please supply a commandline on format:\nwfaViewerServer <analysis-output-folder>\n');sys.exit()
app.analysisfolder = analysisfolder
app.analysisfolder.settings.mapqCutOff = int(app.analysisfolder.settings.mapqCutOff)
#
# check analysis folder
#
if not analysisfolder.checkIntegrity() == 'PASS': print analysisfolder.checkIntegrity()+'\nERROR: Now exiting'

#
# create a logfile
#
logfile = open(analysisfolder.logpath+'/wfaViewerServer','a',1)
logfile.write('cmd: '+' '.join(sys.argv)+'\n')
analysisfolder.logfile = logfile

def createStaticFiles(app):
    
    #
    # Imports
    #
    import sys
    import os
    import seqdata    
    import operator
    
    pathToStatic = '/'.join(os.path.realpath(sys.argv[0]).split('/')[:-1])+'/static'
    if not os.path.isdir(pathToStatic): os.mkdir(pathToStatic)
    
    #insert sizes
	
    #
    # open connection to database
    #
    app.analysisfolder.database.getConnection()

    before = app.analysisfolder.settings.mapqCutOff
    for mapq in xrange(50):
        app.analysisfolder.settings.mapqCutOff=mapq
        readPairs = app.analysisfolder.database.c.execute('SELECT insertSize FROM reads WHERE mapQR1>=? AND mapQR2>=?',(app.analysisfolder.settings.mapqCutOff,app.analysisfolder.settings.mapqCutOff,))
        isizeDict = {}
        insertSizeCSV=open(pathToStatic+'/insersizes.'+str(app.analysisfolder.settings.mapqCutOff)+'.csv','w')
        insertSizeCSV.write('iSize,count\n')
        while True:
            
            rows = readPairs.fetchmany()#size=readPairs.arraysize)
            
            if not rows: break
            
            for row in rows:
                insertSize = row[0]
                try: isizeDict[insertSize]+=1
                except KeyError:isizeDict[insertSize]=1
        
        for insertSize, count in sorted(isizeDict.iteritems(), key=operator.itemgetter(0)): insertSizeCSV.write( str(insertSize)+','+str(count)+'\n')
    app.analysisfolder.settings.mapqCutOff=before
    
    app.analysisfolder.database.commitAndClose()    

def indexForeachCluster(clusterId):
    from seqdata import BarcodeClusterer, BarcodeCluster
    cluster = BarcodeCluster(clusterId,app.analysisfolder)
    cluster.loadClusterInfo()
    #cluster.loadReadPairs()
    cluster.minMAPQ = 20
    return cluster

@app.route("/")
def start():
    page =  """<!DOCTYPE HTML>
    <html lang="en-US">
	<head>
	    <meta charset="UTF-8">
	    <meta http-equiv="refresh" content="1;url=index.html">
	    <script type="text/javascript">
		window.location.href = "index.html"
	    </script>
	    <title>Page Redirection</title>
	</head>
	<body>
	    If you are not redirected automatically, follow <a href='index.html'>this link</a>
	</body>
    </html>"""
    return page

@app.route("/index.html")
@app.route('/index.html&low<low>')
@app.route('/index.html&high<high>')
@app.route('/index.html&low<low>&high<high>')
@app.route('/index.html&high<high>&low<low>')
def index(high=1000,low=0):
    
    high = max(int(high),int(low)+10)
    
    app.analysisfolder.logfile.write('Generating index.html ...\n')
    
    from seqdata import BarcodeClusterer, BarcodeCluster
    from misc import thousandString, percentage
    import os
    import operator
    outStr = ''
    outStr += '<html>'
    outStr += """<head>
        <script src="http://d3js.org/d3.v3.js"></script>
        <style>
        body {
            background-color:white
            font-family : Arial,"Myriad Web",Verdana,Helvetica,sans-serif;
        }
        h1   {color:black}
        p    {color:green}
        
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
            
            font-size : 12;
        }
        th {
            text-align: center;
            background-color:darkgray;
            color:white;
            border: 1px solid black;
        }
        table {border-spacing: 1px;}
        th,td {padding: 5px;}
        td {text-align: center;}
        
        #page {
            position:absolute;
            top:0;
            left:0;
            width:100%;
            width:100vw;
        }
        
        #header {
            background-color:black;
            color:white;
            text-align:left;
            padding:5px;
            height:60px;
            width:100%;
            width:100vw;
            position:absolute;
        }
        
        #status {
            background-color:#e1e1e1;
            text-align:center;
            padding:10px;
            width:100%;
            left:0;
            position:absolute;
            top:60px
        }
        
        #statistics {
            line-height:20px;
            background-color:#eeeeee;
            width:500px;
            padding:20px;
            float:left;
        }
        
        #details {
            padding:20px;
            float:left;
        }
        
        #image {
            padding:0px;
            float:left;
            font: 10px sans-serif;
        }
        #slider {
            padding:0px;
            float:left;
            font: 10px sans-serif;
        }
        rect {
            fill: steelblue;
        }
        rect:hover {
            fill: black ;
        }
        .d3-tip {
          line-height: 1;
          font-weight: bold;
          padding: 12px;
          background: rgba(0, 0, 0, 0.8);
          color: #fff;
          border-radius: 2px;
        }
        .d3-tip:after {
          box-sizing: border-box;
          display: inline;
          font: 10px sans-serif;
          font-size: 10px;
          width: 100%;
          line-height: 1;
          color: rgba(0, 0, 0, 0.8);
          content: "\\25BC";
          position: absolute;
          text-align: center;
        }
        .d3-tip.n:after {
          margin: -1px 0 0 0;
          top: 100%;
          left: 0;
        }

    </style></head>"""
    outStr += '<body><div id="page">'

    outStr += '<div id="header">'
    outStr += '<h2>'+'&nbsp&nbsp&nbsp&nbsp'+'Summary of analysis at '+str(os.path.abspath(app.analysisfolder.path))+':</h2>'
    outStr += '</div>'
    outStr += '<div id="status">'
    outStr += '<svg height="32" width="150"><circle cx="16" cy="16" r="15" stroke="black" stroke-width="1" fill="gray" /><text x="40" y="20">wfaChecker</text></svg>'
    outStr += '<svg height="32" width="180"><circle cx="16" cy="16" r="15" stroke="black" stroke-width="1" fill="gray" /><text x="40" y="20">barcodeClustrer</text></svg>'
    outStr += '<svg height="32" width="180"><circle cx="16" cy="16" r="15" stroke="black" stroke-width="1" fill="gray" /><text x="40" y="20">clustersMapper</text></svg>'
    outStr += '<svg height="32" width="150"><circle cx="16" cy="16" r="15" stroke="black" stroke-width="1" fill="gray" /><text x="40" y="20">analyseClusters</text></svg>'
    outStr += '</div>'
    outStr += '<div id="statistics"><br><br><br><br><br>'
    outStr += '<h2>Stats:</h2>'
    outStr += 'Total read pairs: '+thousandString(app.analysisfolder.results.totalReadCount)+'<br>\n'
    outStr += 'Minimum R1 length: '+str(app.analysisfolder.results.minR1readLength)+'<br>\n'
    outStr += 'Minimum R2 length: '+str(app.analysisfolder.results.minR2readLength)+'<br>\n'
    outStr += 'Reads has illumina adapter content: '+thousandString(app.analysisfolder.results.readPairsAreIlluminaAdapters)+' ('+str(percentage(app.analysisfolder.results.readPairsAreIlluminaAdapters,app.analysisfolder.results.totalReadCount))+'% of total)<br>\n'
    outStr += '<br>\n'

    outStr += 'Construct type dictionary: '+'<br>\n'
    #for what, count in eval(app.analysisfolder.results.constructTypes).iteritems():
    if app.analysisfolder.results.constructTypes:
        for what, count in sorted(eval(app.analysisfolder.results.constructTypes).iteritems(), key=operator.itemgetter(1))[::-1]:
            outStr += '&nbsp&nbsp&nbsp&nbsp'+what+' => '+str(percentage(count,app.analysisfolder.results.totalReadCount))+'%, ('+thousandString(count)+')<br>\n'
    else:outStr += 'No Data Available<br>\n'
    outStr += '<br>\n'
    
    outStr += 'Barcodes match DBS pattern:<br>\n'
    if app.analysisfolder.results.readsWithDbsPatternMatch:
        tmp = eval(app.analysisfolder.results.readsWithDbsPatternMatch)
        outStr += '&nbsp&nbsp&nbsp&nbsp'+'barcode does not exist => '+str(percentage(tmp[None],app.analysisfolder.results.totalReadCount))+'%, ('+thousandString(tmp[None])+')<br>\n'
        outStr += '&nbsp&nbsp&nbsp&nbsp'+'barcode does not match => '+str(percentage(tmp[False],app.analysisfolder.results.totalReadCount))+'%, ('+thousandString(tmp[False])+')<br>\n'
        outStr += '&nbsp&nbsp&nbsp&nbsp'+'barcode match DBS pattern=> '+str(percentage(tmp[True],app.analysisfolder.results.totalReadCount))+'%, ('+str(percentage(tmp[True],int(app.analysisfolder.results.totalReadCount)-int(tmp[None])))+'% of has barcode,'+thousandString(tmp[True])+')<br>\n'
    outStr += '<br>\n'
    outStr += 'Read pairs has a barcode: '+thousandString(app.analysisfolder.results.readPairsHasBarcode)+'<br>\n'
    outStr += 'Unique barcodes: '+thousandString(app.analysisfolder.results.uniqueBarcodeSequences)+'<br>\n'
    outStr += 'Barcode clusters found: '+thousandString(app.analysisfolder.results.barcodeClusterCount)+'<br>\n'
    outStr += 'Barcode clusters are singletons: '+thousandString(app.analysisfolder.results.singeltonBarcodeClusters)+'<br>\n'+'<br>\n'
    outStr += 'Bowtie2 alignment Rate: '+str(app.analysisfolder.results.bt2AlignmentRate)+'%<br>\n'
    outStr += 'Percentage of SE alignments with mapq >= 20: '+str(app.analysisfolder.results.alignmentRateQ20)+'%<br>\n'+'<br>\n'
    outStr += '<br>\n'
    outStr += '</div>'
    
    outStr += '<div id="details"><br><br><br><br><br>'
    outStr += """<br><br>
    <script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
    <script>
        d3.csv("readspercluster.csv", function (data) {
            
            var width = 600,
            height = 300,
            padding = 50,
            move_left = 60,
            move_down = 5;
        
            // when the input range changes update the angle 
            d3.select("#nAngle").on("input", function() {
              update(+this.value);
            });
            
            var map = data.map( function (i) { return parseInt(i.reads); } )
                //.filter(function(i) { return i > nAngle })

            var bin_width = d3.max(map)/100
            var bins = []
            for (var i = 0; i < d3.max(map)+1; i=i+bin_width) {
                bins.push(i);
            }
            
            var histogram = d3.layout.histogram()
                .bins(bins)
                (map)
                
            var y = d3.scale.linear()
                .domain([0, d3.max(histogram.map( function (i) { return i.length; } ) )])
                .range([height-move_down, 0]);

            var x = d3.scale.linear()
                .domain([0, d3.max(map)])
                .range([0, width-move_left]);
            d3.select("#nAngle").property("max", d3.max(map));
            d3.select("#nAngle").property("style", "width:" + ( width - move_left ) + "px");
            d3.select("#nReadsMin").property("style","display: inline-block; width: " + ( move_left ) + "px; text-align: right");
                
            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom");

            var yAxis = d3.svg.axis()
                .scale( y )
                .orient("left");

            var tip = d3.tip()
              .attr('class', 'd3-tip')
              .offset([-10, 0])
              .html(function(d) {
                return d.y + " clusters has " + Math.ceil(Math.round(d.x*10)/10) + " to " + Math.floor(Math.round((d.x + d.dx)*10)/10) + " reads";
              })

            var canvas = d3.select("#image").append("svg")
                .attr("width",width)
                .attr("height",height + padding )
                .append("g")
                    .attr( "transform", "translate( " + move_left + " ,  " + move_down + "  )" ) ;
            
            canvas.call(tip)
                
            var group = canvas.append("g")
                .attr("transform","translate(0," + (height-move_down) + ")" )
                .style({ 'stroke': 'Black', 'fill': 'none', 'stroke-width': '1px'})
                .call(xAxis)
            .selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(90)")
                .style("text-anchor", "start");

            var group2 = canvas.append("g")
                .style({ 'stroke': 'Black', 'fill': 'none', 'stroke-width': '1px'})
                .call(yAxis);
                
            var bars = canvas.selectAll("rect")
                .data(histogram)
                .enter()
                .append("svg:rect")
            
            //bars.append("rect")
                .attr("x", function (d) { return x(d.x) } )
                .attr("y", function (d) { return y(d.y) } )
                .attr("width", function (d) { return x(d.dx) } )
                .attr("height", function (d) { return y(0) - y(d.y) } )
                //.attr("fill", "steelblue")
                .on('mouseover', tip.show)
                .on('mouseout', tip.hide);
                
            // Initial starting angle of the text 
            update(0);
            
            // update the element
            function update(nAngle) {
            
              // adjust the text on the range slider
              d3.select("#nReadsMin-value").text(nAngle);
              d3.select("#nAngle").property("value", nAngle);
            
              // rotate the text
              //holder.select("text") 
              //  .attr("transform", "translate(300,150) rotate("+nAngle+")");
              redraw(nAngle)
            }
            
            function redraw(nAngle) {
                // Update
                
                var map = data.map( function (i) { return parseInt(i.reads); } )
                    .filter(function(i) { return i >= nAngle })

                var histogram = d3.layout.histogram()
                    .bins(bins)
                    (map)
                    
                y.domain([0, d3.max(histogram.map( function (i) { return i.length; } ) )])
    
                x.domain([0, d3.max(map)])
                    
                console.log(map)
                
                group2.transition()
                    .duration(1000)
                    .call(yAxis);
                
                canvas.selectAll("rect")
                        .data(histogram)
                    .transition()
                        .duration(1000)
                        .attr("x", function (d) { return x(d.x) } )
                        .attr("y", function (d) { return y(d.y) } )
                        .attr("width", function (d) { return x(d.dx) } )
                        .attr("height", function (d) { return y(0) - y(d.y) } )
                        //.attr("fill", "steelblue");
            }
        } )
        </script>
    <div id="slider">
        <span style="font: 12px sans-serif;color:black">Minimum Read Count Per Barcode Cluster</span><br>
        <label for="nReadsMin" style="display: inline-block; width: 55px; text-align: right">
        <span id="nReadsMin-value" style="font: 12px sans-serif;color:black">...</span>
        </label>
        <input type="range" step="1" min="0" max="5000" id="nAngle" value="0"><br>
        <div id="image"></div>
    </div>
    
    """

    outStr += '<h2>List of clusters:</h2>'
    if app.analysisfolder.results.barcodeClusterCount:
        barcodeClusterer = BarcodeClusterer(app.analysisfolder)
        import multiprocessing
        #poolOfProcesses = multiprocessing.Pool(int(app.analysisfolder.settings.parallelProcesses),maxtasksperchild=10000)
        #parallelResults = poolOfProcesses.imap_unordered(indexForeachCluster,barcodeClusterer.getBarcodeClusterIds(shuffle=False,byMixedClusterReadCount=False),chunksize=1)
        #parallelResults = poolOfProcesses.imap(indexForeachCluster,barcodeClusterer.getBarcodeClusterIds(shuffle=False,byMixedClusterReadCount=False),chunksize=1)
        tableHeader = '<tr>' 
        tableHeader += '<th>clusterID</th>'
        tableHeader += '<th>barcode</th>'
        tableHeader += '<th>reads (PE)</th>'
        tableHeader += '<th>map% (SE)</th>'
        tableHeader += '<th>map%q20 (SE)</th>'
        tableHeader += '<th>goodPair%</th>'
        tableHeader += '<th>dup%</th>'
    #    outStr += '<th>pos R1</th>'
    #    outStr += '<th>pos R2</th>'
    #    outStr += '<th>insertsize</th>'
    #    outStr += '<th>mapQ</th>'
    #    outStr += '<th>CIGAR</th>'
        tableHeader += '</tr>' 
        counter = 0
        sameChrom = 0
        pcrDup = 0
        totalReadPairCount=0
        totalmappedSEReads=0
        totalreadPairsInBamFile=0
        totalSEreadsPassMappingQualityFilter=0
        totalgoodReadPairs=0
        totalduplicateReadPairs=0
        tableRows = ''
        for clusterId in barcodeClusterer.getBarcodeClusterIds(shuffle=False,byMixedClusterReadCount=False):
            if int(clusterId) < int(low): continue
            cluster = indexForeachCluster(clusterId)
        #for cluster in parallelResults:
            if int(clusterId) > int(high): break
            counter += 1            
            
            inbamPerc = percentage(cluster.readPairsInBamFile,cluster.readPairCount)
            if cluster.readPairsInBamFile:
                mappedSE = percentage(cluster.mappedSEReads, cluster.readPairsInBamFile*2)
                mappedSEqPass=percentage(cluster.SEreadsPassMappingQualityFilter,cluster.readPairsInBamFile*2)
            else:
                mappedSE = percentage(cluster.mappedSEReads, 0)
                mappedSEqPass=percentage(cluster.SEreadsPassMappingQualityFilter,0)

            goodReads = percentage(cluster.goodReadPairs,cluster.readPairsInBamFile)
            dupPerc = percentage(cluster.duplicateReadPairs,cluster.goodReadPairs)

            if cluster.mappedSEReads:      totalmappedSEReads+=cluster.mappedSEReads
            if cluster.readPairsInBamFile: totalreadPairsInBamFile+=cluster.readPairsInBamFile
            if cluster.SEreadsPassMappingQualityFilter: totalSEreadsPassMappingQualityFilter+=cluster.SEreadsPassMappingQualityFilter
            if cluster.goodReadPairs:      totalgoodReadPairs+=cluster.goodReadPairs
            if cluster.duplicateReadPairs: totalduplicateReadPairs+=cluster.duplicateReadPairs

            tableRows += '<tr>'
            tableRows += '<td><a href="/cluster'+str(cluster.id)+'">'+str(cluster.id)+'</a></td>'
            tableRows += '<td><a href="cluster'+str(cluster.id)+'"><font face="Courier">'+str(cluster.barcodeSequence)+'</font></a></td>\n'
            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'+str(cluster.readPairCount)+'</a></td>\n'
            totalReadPairCount += cluster.readPairCount

            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'
            if mappedSE == 'NA': tableRows += '<font color="gray">'
            elif mappedSE > 50:tableRows += '<font color="green">'
            else:            tableRows += '<font color="red">'
	    tableRows += str(mappedSE)+'%</font></a></td>\n'

            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'
            if mappedSEqPass == 'NA': tableRows += '<font color="gray">'
            elif mappedSEqPass > 50:tableRows += '<font color="green">'
            else:            tableRows += '<font color="red">'
	    tableRows += str(mappedSEqPass)+'%</font></a></td>\n'

            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'
            if goodReads == 'NA': tableRows += '<font color="gray">'
            elif goodReads > 50:tableRows += '<font color="green">'
            else:            tableRows += '<font color="red">'
	    tableRows += str(goodReads)+'%</font></a></td>\n'

            tableRows += '<td><a href="cluster'+str(cluster.id)+'">'
            if dupPerc == 'NA': tableRows += '<font color="gray">'
            elif dupPerc < 50:tableRows += '<font color="green">'
            else:            tableRows += '<font color="red">'
	    tableRows += str(dupPerc)+'%</font></a></td>\n'

            tableRows += '</tr>'

        #poolOfProcesses.close();print 'Closing'
        #poolOfProcesses.terminate();print 'terminating'
        #poolOfProcesses.join();print 'joining'
        outStr += '<table>'
        outStr += '<tr>'


        #
        # summary row
        #

        mappedSE = percentage(totalmappedSEReads, totalreadPairsInBamFile*2)
        mappedSEqPass=percentage(totalSEreadsPassMappingQualityFilter,totalreadPairsInBamFile*2)
        goodReads = percentage(totalgoodReadPairs,totalreadPairsInBamFile)
        dupPerc = percentage(totalduplicateReadPairs,totalgoodReadPairs)

        outStr += '<td colspan=2><font face="Courier">Summary for the first '+str(counter)

        outStr += ' clusters</font></td>\n'

        outStr += '<td>'+str(thousandString(totalReadPairCount))+'</td>\n'

        outStr += '<td>'
        if mappedSE == 'NA': outStr += '<font color="gray">'
        elif mappedSE > 50:outStr += '<font color="green">'
        else:            outStr += '<font color="red">'
        outStr += str(mappedSE)+'%</font></td>\n'

        outStr += '<td>'
        if mappedSEqPass == 'NA': outStr += '<font color="gray">'
        elif mappedSEqPass > 50:outStr += '<font color="green">'
        else:            outStr += '<font color="red">'
        outStr += str(mappedSEqPass)+'%</font></td>\n'

        outStr += '<td>'
        if goodReads == 'NA': outStr += '<font color="gray">'
        elif goodReads > 50:outStr += '<font color="green">'
        else:            outStr += '<font color="red">'
        outStr += str(goodReads)+'%</font></td>\n'

        outStr += '<td>'
        if dupPerc == 'NA': outStr += '<font color="gray">'
        elif dupPerc < 50:outStr += '<font color="green">'
        else:            outStr += '<font color="red">'
        outStr += str(dupPerc)+'%</font></td>\n'

        outStr += tableHeader
        outStr += tableRows    
        outStr += '</table><br>'
    outStr += '</div>'
    outStr += '</div>'
    app.analysisfolder.logfile.write('index.html generated.\n')
    return outStr

@app.route('/test.html')
def pellegurgelfnutt():
    outStr = ''
    outStr += '<html>'
    outStr += """<head>
        <script src="http://d3js.org/d3.v3.js"></script>
        <style>
        body {
            background-color:white
            font-family : Arial,"Myriad Web",Verdana,Helvetica,sans-serif;
        }
        h1   {color:black}
        p    {color:green}
        
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
            
            font-size : 12;
        }
        th {
            text-align: center;
            background-color:darkgray;
            color:white;
            border: 1px solid black;
        }
        table {border-spacing: 1px;}
        th,td {padding: 5px;}
        td {text-align: center;}
    </style></head>"""
    outStr += '<body>'
    outStr += """
    <script>
        
        var width = 1000,
            height = 500,
            padding = 50;
        
        d3.csv("readspercluster.csv", function (data) {
            var map = data.map( function (i) { return parseInt(i.reads); } )
            
            var histogram = d3.layout.histogram()
                .bins(100)
                (map)
                
            var y = d3.scale.linear()
                .domain([0, d3.max(histogram.map( function (i) { return i.length; } ) )])
                .range([height, 0]);

            var x = d3.scale.linear()
                .domain([0, d3.max(map)])
                .range([0, width]);
                
            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom");

            var yAxis = d3.svg.axis()
                .scale( y )
                .orient("left");

            var canvas = d3.select("body").append("svg")
                .attr("width",width)
                .attr("height",height + padding )
                .append("g")
                    .attr( "transform", "translate( 100 , 0 )" ) ;
                
            var group = canvas.append("g")
                .attr("transform","translate(0," + height + ")" )
                .style({ 'stroke': 'Black', 'fill': 'none', 'stroke-width': '1px'})
                .call(xAxis);

            var group2 = canvas.append("g")
                .style({ 'stroke': 'Black', 'fill': 'none', 'stroke-width': '1px'})
                .call(yAxis);
                
            var bars = canvas.selectAll(".bar")
                .data(histogram)
                .enter()
                .append("g");
            
            bars.append("rect")
                .attr("x", function (d) { return x(d.x) } )
                .attr("y", function (d) { return y(d.y) } )
                .attr("width", function (d) { return x(d.dx) } )
                .attr("height", function (d) { return y(0) - y(d.y) } )
                .attr("fill", "steelblue");
        } ) </script>
    """
    outStr += '</body></html>\n'
    return outStr

@app.route('/cluster<cluster_id>')
@app.route('/cluster<cluster_id>&makebam=<makebam>')
def cluster(cluster_id, makebam=False):

    import time
    starttime = time.time()
    print 'Creating per cluster page for cluster '+str(cluster_id)
    app.analysisfolder.logfile.write('Creating per cluster page for cluster '+str(cluster_id)+' ... '+'\n')
    from seqdata import BarcodeCluster
    from misc import thousandString
    from misc import percentage
    import pysam

    outStr = ''
    outStr += '<html>'
    outStr += """<head><style>
        body {
            background-color:white
            font-family : Arial,"Myriad Web",Verdana,Helvetica,sans-serif;
        }
        h1   {color:black}
        p    {color:green}
        
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
            
            font-size : 12;
        }
        th {
            text-align: center;
            background-color:darkgray;
            color:white;
            border: 1px solid black;
        }
        table {border-spacing: 1px;}
        th,td {padding: 5px;}
        td {text-align: center;}
    </style></head>"""
    outStr += '<body><a href=index.html>Back</a> | <a href=cluster'+str(cluster_id)+'&makebam=True >Make Bamfile</a><br><br>'

    cluster = BarcodeCluster(int(cluster_id),app.analysisfolder)
    app.analysisfolder.logfile.write('Loading reads for cluster '+str(cluster_id)+' ... '+'\n')
    cluster.loadClusterInfo()
    if not cluster.tableStr:
        cluster.analyze()
        cluster.removeAllFiles()
        cluster.updatedb()

    if makebam:
        cluster.analyze()
        cluster.updatedb()

    outStr += cluster.generateHtmlSummary()
    outStr += '<br><br>'
    outStr += cluster.tableStr
    outStr += '</body></html>\n'
    app.analysisfolder.logfile.write('Page for cluster '+str(cluster_id)+' generated in '+str(round(time.time()-starttime,2))+'seconds '+'\n')
    return outStr

@app.route("/readspercluster.csv")
def readspercluster():
    from seqdata import BarcodeCluster, BarcodeClusterer

    outstr = '"id","reads"'+'\n'    
    app.analysisfolder.database.getConnection()
    tmpData = list(app.analysisfolder.database.c.execute('SELECT clusterId,clusterTotalReadCount FROM barcodeClusters').fetchall())
    app.analysisfolder.database.commitAndClose()
    for i in tmpData:
        if int(i[1]) > 0 :outstr += '"'+str(i[0])+'",'+str(i[1])+'\n'

    # outstr += '"pelle",0'+'\n'
    # outstr += '"pelle",10'+'\n'
    # outstr += '"pelle",20'+'\n'
    # outstr += '"pelle",30'+'\n'
    # outstr += '"pelle",40'+'\n'
    # outstr += '"pelle",50'+'\n'
    # outstr += '"pelle",50'+'\n'
    # outstr += '"pelle",0'+'\n'
    # outstr += '"pelle",10'+'\n'
    # outstr += '"pelle",60'+'\n'
    # if app.analysisfolder.results.barcodeClusterCount:
    #     barcodeClusterer = BarcodeClusterer(app.analysisfolder)
    #     counter = 0
    #     sameChrom = 0
    #     pcrDup = 0
    #     for clusterId in barcodeClusterer.getBarcodeClusterIds(shuffle=False,byMixedClusterReadCount=False):
    #         cluster = indexForeachCluster(clusterId)
    #         outstr += '"'+str(cluster.id)+'",'+str(cluster.readPairCount)+'\n'
    #         counter += 1
    #         if counter == 100: break
    return outstr


if __name__ == "__main__":
#    createStaticFiles(app)
    app.run(host='0.0.0.0',port=5000,debug=True)

